{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPT2YzrlRV112P2onFcDnG5"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["#SVM"],"metadata":{"id":"LwQKCigxD5dX"}},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"298xJRZSZOB4","executionInfo":{"status":"ok","timestamp":1713199045225,"user_tz":180,"elapsed":2409,"user":{"displayName":"Victor Hugo do Nascimento","userId":"04558136456232909731"}},"outputId":"5ca6a9af-fd5f-4ef9-911f-75b9766b2bd3"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"markdown","source":["# 1. Importando As Bibliotecas"],"metadata":{"id":"gnOkNcfpaI3V"}},{"cell_type":"code","source":["#Bibliotecas Necessarias\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import pandas as pd"],"metadata":{"id":"Mz_367rSb6_u","executionInfo":{"status":"ok","timestamp":1713199047060,"user_tz":180,"elapsed":1838,"user":{"displayName":"Victor Hugo do Nascimento","userId":"04558136456232909731"}}},"execution_count":2,"outputs":[]},{"cell_type":"markdown","source":["#2. Importando o DataSet"],"metadata":{"id":"l3XUtICtaM9F"}},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"2XU-wrzyYjUQ","executionInfo":{"status":"ok","timestamp":1713199047062,"user_tz":180,"elapsed":11,"user":{"displayName":"Victor Hugo do Nascimento","userId":"04558136456232909731"}},"outputId":"6b56b465-69ff-4037-c240-857587ae0043"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Age  EstimatedSalary  Purchased\n","0   19            19000          0\n","1   35            20000          0\n","2   26            43000          0\n","3   27            57000          0\n","4   19            76000          0"],"text/html":["\n","  <div id=\"df-e76c279b-79da-447e-86a5-70731f11b87e\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Age</th>\n","      <th>EstimatedSalary</th>\n","      <th>Purchased</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>19</td>\n","      <td>19000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>35</td>\n","      <td>20000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>26</td>\n","      <td>43000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>27</td>\n","      <td>57000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>19</td>\n","      <td>76000</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e76c279b-79da-447e-86a5-70731f11b87e')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-e76c279b-79da-447e-86a5-70731f11b87e button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-e76c279b-79da-447e-86a5-70731f11b87e');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-e85bd5ad-adb3-433c-9913-9db1b953d2f6\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e85bd5ad-adb3-433c-9913-9db1b953d2f6')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-e85bd5ad-adb3-433c-9913-9db1b953d2f6 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"dataset","summary":"{\n  \"name\": \"dataset\",\n  \"rows\": 400,\n  \"fields\": [\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10,\n        \"min\": 18,\n        \"max\": 60,\n        \"num_unique_values\": 43,\n        \"samples\": [\n          50,\n          39,\n          38\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"EstimatedSalary\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 34096,\n        \"min\": 15000,\n        \"max\": 150000,\n        \"num_unique_values\": 117,\n        \"samples\": [\n          117000,\n          76000,\n          88000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Purchased\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":3}],"source":["#Lendo o Dataset e Separando a Matriz de Caracteristica (X) e a Matriz de \"Resultado\"(Y)\n","dataset = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/MACHINE A-Z/DATASETS/Social_Network_Ads.csv')\n","dataset.head()"]},{"cell_type":"code","source":["x = dataset.iloc[:, :-1].values\n","y = dataset.iloc[:, -1].values"],"metadata":{"id":"YzX5UgVTd2s-","executionInfo":{"status":"ok","timestamp":1713199047063,"user_tz":180,"elapsed":9,"user":{"displayName":"Victor Hugo do Nascimento","userId":"04558136456232909731"}}},"execution_count":4,"outputs":[]},{"cell_type":"markdown","source":["# 3. Dividir o Dataset Entre Treino e Test"],"metadata":{"id":"DClGlVlgahO2"}},{"cell_type":"code","source":["# Separando dados de treino e teste\n","from sklearn.model_selection import train_test_split\n","x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.25, random_state = 0)"],"metadata":{"id":"7JOA7UBVcH3-","executionInfo":{"status":"ok","timestamp":1713199048276,"user_tz":180,"elapsed":1222,"user":{"displayName":"Victor Hugo do Nascimento","userId":"04558136456232909731"}}},"execution_count":5,"outputs":[]},{"cell_type":"markdown","source":["#4. Feature Scaling"],"metadata":{"id":"TOqpi0wXatyl"}},{"cell_type":"code","source":["# Normalizando as características do conjunto de dados, escala de caracteristicas\n","from sklearn.preprocessing import StandardScaler\n","sc = StandardScaler()\n","x_train = sc.fit_transform(x_train)\n","x_test = sc.transform(x_test)"],"metadata":{"id":"K0tdh7wFdgWY","executionInfo":{"status":"ok","timestamp":1713199048278,"user_tz":180,"elapsed":19,"user":{"displayName":"Victor Hugo do Nascimento","userId":"04558136456232909731"}}},"execution_count":6,"outputs":[]},{"cell_type":"markdown","source":["#5. Treinando o Modelo"],"metadata":{"id":"zUMnuA-Ka11s"}},{"cell_type":"code","source":["from sklearn.svm import  SVC\n","classifier = SVC(kernel = 'linear', random_state = 0)\n","classifier.fit(x_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":75},"id":"K8V4TwbUgRhH","executionInfo":{"status":"ok","timestamp":1713199048278,"user_tz":180,"elapsed":17,"user":{"displayName":"Victor Hugo do Nascimento","userId":"04558136456232909731"}},"outputId":"220246da-fbed-4e71-fbfb-4803ac34b955"},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["SVC(kernel='linear', random_state=0)"],"text/html":["<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SVC(kernel=&#x27;linear&#x27;, random_state=0)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SVC</label><div class=\"sk-toggleable__content\"><pre>SVC(kernel=&#x27;linear&#x27;, random_state=0)</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":7}]},{"cell_type":"markdown","source":["#6. Predizendo Novos Resultados"],"metadata":{"id":"4QaUUtZya8IF"}},{"cell_type":"code","source":["pred = classifier.predict(sc.transform([[30, 87000]]))\n","print(pred)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ilKMPfEjjAFz","executionInfo":{"status":"ok","timestamp":1713199048279,"user_tz":180,"elapsed":16,"user":{"displayName":"Victor Hugo do Nascimento","userId":"04558136456232909731"}},"outputId":"6ed8b7df-b010-4d50-af29-126dc108067e"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["[0]\n"]}]},{"cell_type":"markdown","source":["#7. Predizendo Resultados De Teste"],"metadata":{"id":"UakyoxHpbAql"}},{"cell_type":"code","source":["# y_pred receberá as predições realizadas pelo algoritmo com os dados da variavel x_test\n","y_pred = classifier.predict(x_test)\n","result = np.concatenate(\n","    (y_pred.reshape(len(y_pred), 1), #Transforma o array y_pred em um array vertical\n","    y_test.reshape(len(y_test), 1)), #Transforma o array y_test em um array vertical\n","    1 #Informa que será feita uma concatenação horizontal\n","    )\n","print(result)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HhWFsOJkmH2D","executionInfo":{"status":"ok","timestamp":1713199048279,"user_tz":180,"elapsed":13,"user":{"displayName":"Victor Hugo do Nascimento","userId":"04558136456232909731"}},"outputId":"ae465d44-25f1-4cbc-940c-ad04142b7ec9"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["[[0 0]\n"," [0 0]\n"," [0 0]\n"," [0 0]\n"," [0 0]\n"," [0 0]\n"," [0 0]\n"," [1 1]\n"," [0 0]\n"," [0 0]\n"," [0 0]\n"," [0 0]\n"," [0 0]\n"," [0 0]\n"," [0 0]\n"," [0 0]\n"," [0 0]\n"," [0 0]\n"," [1 1]\n"," [0 0]\n"," [0 0]\n"," [1 1]\n"," [0 0]\n"," [1 1]\n"," [0 0]\n"," [1 1]\n"," [0 0]\n"," [0 0]\n"," [0 0]\n"," [0 0]\n"," [0 0]\n"," [0 1]\n"," [1 1]\n"," [0 0]\n"," [0 0]\n"," [0 0]\n"," [0 0]\n"," [0 0]\n"," [0 0]\n"," [1 1]\n"," [0 0]\n"," [0 0]\n"," [0 0]\n"," [0 0]\n"," [1 1]\n"," [0 0]\n"," [0 0]\n"," [1 1]\n"," [0 0]\n"," [1 1]\n"," [1 1]\n"," [0 0]\n"," [0 0]\n"," [0 0]\n"," [1 1]\n"," [0 1]\n"," [0 0]\n"," [0 0]\n"," [0 1]\n"," [0 0]\n"," [0 0]\n"," [1 1]\n"," [0 0]\n"," [0 1]\n"," [0 0]\n"," [1 1]\n"," [0 0]\n"," [0 0]\n"," [0 0]\n"," [0 0]\n"," [1 1]\n"," [0 0]\n"," [0 0]\n"," [0 1]\n"," [0 0]\n"," [0 0]\n"," [1 0]\n"," [0 0]\n"," [1 1]\n"," [1 1]\n"," [1 1]\n"," [1 0]\n"," [0 0]\n"," [0 0]\n"," [1 1]\n"," [1 1]\n"," [0 0]\n"," [1 1]\n"," [0 1]\n"," [0 0]\n"," [0 0]\n"," [1 1]\n"," [0 0]\n"," [0 0]\n"," [0 0]\n"," [0 1]\n"," [0 0]\n"," [0 1]\n"," [1 1]\n"," [1 1]]\n"]}]},{"cell_type":"markdown","source":["#8. Matriz de Confusão e Metricas"],"metadata":{"id":"v5rCLV6tbI1P"}},{"cell_type":"code","source":["from sklearn.metrics import confusion_matrix, accuracy_score\n","cm = confusion_matrix(y_test, y_pred)\n","print(cm)\n","print('Precision:', accuracy_score(y_test, y_pred))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mLFCk-y9o_iM","executionInfo":{"status":"ok","timestamp":1713199048741,"user_tz":180,"elapsed":473,"user":{"displayName":"Victor Hugo do Nascimento","userId":"04558136456232909731"}},"outputId":"fdf97eac-71ca-4cca-a605-427cb832c80f"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["[[66  2]\n"," [ 8 24]]\n","Precision: 0.9\n"]}]},{"cell_type":"markdown","source":["Visualização Grafica"],"metadata":{"id":"tOYNYxnwrMJt"}},{"cell_type":"code","source":["mat_con = confusion_matrix(y_test, y_pred, labels=[0, 1])\n","\n","# Setting the attributes\n","fig, px = plt.subplots(figsize=(7.5, 7.5))\n","px.matshow(mat_con, cmap=plt.cm.YlOrBr, alpha=0.5)\n","for m in range(mat_con.shape[0]):\n","    for n in range(mat_con.shape[1]):\n","        px.text(x=m, y=n, s=mat_con[m, n], va=\"center\", ha=\"center\", size=\"xx-large\")\n","\n","# Sets the labels\n","plt.xlabel(\"Predição\", fontsize=16)\n","plt.ylabel(\"Realidade\", fontsize=16)\n","plt.title(\"Confusion Matrix\", fontsize=15)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":692},"id":"gQrf2AOrs0h1","executionInfo":{"status":"ok","timestamp":1713199049481,"user_tz":180,"elapsed":744,"user":{"displayName":"Victor Hugo do Nascimento","userId":"04558136456232909731"}},"outputId":"ed33912e-bb95-427f-e323-9743f40d76ab"},"execution_count":11,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 750x750 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["from sklearn.metrics import classification_report\n","print(classification_report(y_test, y_pred))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"f99txPT5rN8w","executionInfo":{"status":"ok","timestamp":1713199049775,"user_tz":180,"elapsed":299,"user":{"displayName":"Victor Hugo do Nascimento","userId":"04558136456232909731"}},"outputId":"2c5330f3-c0cb-47fa-ca33-c4a532d2f344"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","           0       0.89      0.97      0.93        68\n","           1       0.92      0.75      0.83        32\n","\n","    accuracy                           0.90       100\n","   macro avg       0.91      0.86      0.88       100\n","weighted avg       0.90      0.90      0.90       100\n","\n"]}]},{"cell_type":"markdown","source":["* Acurácia (Accuracy): Indica a proporção de previsões corretas em relação ao total de previsões. É uma métrica geralmente utilizada para avaliar o desempenho global do modelo.\n","* Precisão (Precision): Indica a proporção de instâncias classificadas como positivas (verdadeiros positivos) corretamente em relação ao total de instâncias classificadas como positivas (verdadeiros positivos mais falsos positivos). É útil quando o foco está na minimização dos falsos positivos.\n","* Recall (Sensibilidade ou Revocação): Indica a proporção de instâncias positivas (verdadeiros positivos) que foram corretamente classificadas em relação ao total de instâncias positivas (verdadeiros positivos mais falsos negativos). É útil quando o foco está na minimização dos falsos negativos.\n","* F1-Score: É a média harmônica entre precisão e recall. É útil quando se deseja uma métrica que balanceie o desempenho do modelo em relação a falsos positivos e falsos negativos.\n"],"metadata":{"id":"acl5V8qzscU1"}}]}